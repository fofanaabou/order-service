spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s

  r2dbc:
    username: postgres
    password: postgres
    url: r2dbc:postgresql://localhost:5433/polar_db_order
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway:
    user: postgres
    password: postgres
    url: jdbc:postgresql://localhost:5433/polar_db_order

  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: true
      retry:
        max-attempts: 5
        initial-interval: 1000
        max-interval: 2000
        multiplier: 2
      enabled: false
    function:
      definition: dispatchOrder
    stream:
      bindings:
        dispatchOrder-in-0:
          destination: order-dispatched
          group: ${spring.application.name}
        acceptOrder-out-0:
          destination: order-accepted
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true
  rabbitmq:
    host: localhost
    port: 5672
    username: broker
    password: broker
    connection-timeout: 5s
server:
  port: 8082
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s

polar:
  catalog-service-uri: http://localhost:8081

